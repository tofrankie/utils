import{_ as d,c as e,o as a,ag as r}from"./chunks/framework.DRADY2L-.js";const b=JSON.parse('{"title":"性能报告","description":"","frontmatter":{},"headers":[],"relativePath":"guide/performance.md","filePath":"guide/performance.md","lastUpdated":1757212236000}'),i={name:"guide/performance.md"};function o(l,t,c,h,n,s){return a(),e("div",null,[...t[0]||(t[0]=[r('<h1 id="性能报告" tabindex="-1">性能报告 <a class="header-anchor" href="#性能报告" aria-label="Permalink to &quot;性能报告&quot;">​</a></h1><p>JavaScript Utils 库经过全面的性能基准测试，确保所有工具函数都具有优秀的性能表现。</p><h2 id="基准测试概览" tabindex="-1">基准测试概览 <a class="header-anchor" href="#基准测试概览" aria-label="Permalink to &quot;基准测试概览&quot;">​</a></h2><p>我们使用 Vitest 的基准测试功能对所有工具函数进行了性能测试，测试结果如下：</p><h3 id="数组工具-array-utilities" tabindex="-1">数组工具 (Array Utilities) <a class="header-anchor" href="#数组工具-array-utilities" aria-label="Permalink to &quot;数组工具 (Array Utilities)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>操作/秒</th><th>性能等级</th><th>说明</th></tr></thead><tbody><tr><td><code>isArray</code></td><td>~9,290,000</td><td>⚡ 极快</td><td>简单的类型检查，性能最优</td></tr><tr><td><code>unique</code> (小数组)</td><td>~5,026,000</td><td>⚡ 极快</td><td>小数组去重性能优秀</td></tr><tr><td><code>chunk</code> (大块)</td><td>~143,000</td><td>🚀 很快</td><td>大块分割性能良好</td></tr><tr><td><code>chunk</code> (小块)</td><td>~35,000</td><td>🚀 很快</td><td>小块分割性能良好</td></tr><tr><td><code>unique</code> (混合类型)</td><td>~32,000</td><td>🚀 很快</td><td>混合类型去重性能良好</td></tr><tr><td><code>unique</code> (大数组重复)</td><td>~1,000</td><td>⚠️ 较慢</td><td>大数组重复数据去重较慢</td></tr></tbody></table><h3 id="函数工具-function-utilities" tabindex="-1">函数工具 (Function Utilities) <a class="header-anchor" href="#函数工具-function-utilities" aria-label="Permalink to &quot;函数工具 (Function Utilities)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>操作/秒</th><th>性能等级</th><th>说明</th></tr></thead><tbody><tr><td><code>debounce</code> (创建)</td><td>~9,437,000</td><td>⚡ 极快</td><td>函数创建性能最优</td></tr><tr><td><code>delay</code> (创建)</td><td>~9,413,000</td><td>⚡ 极快</td><td>延迟函数创建性能优秀</td></tr><tr><td><code>throttle</code> (创建)</td><td>~9,024,000</td><td>⚡ 极快</td><td>节流函数创建性能优秀</td></tr><tr><td><code>delay</code> (执行)</td><td>~2,430,000</td><td>⚡ 极快</td><td>延迟执行性能优秀</td></tr><tr><td><code>debounce</code> (执行)</td><td>~1,517,000</td><td>⚡ 极快</td><td>防抖执行性能优秀</td></tr><tr><td><code>throttle</code> (执行)</td><td>~1,381,000</td><td>⚡ 极快</td><td>节流执行性能优秀</td></tr></tbody></table><h3 id="对象工具-object-utilities" tabindex="-1">对象工具 (Object Utilities) <a class="header-anchor" href="#对象工具-object-utilities" aria-label="Permalink to &quot;对象工具 (Object Utilities)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>操作/秒</th><th>性能等级</th><th>说明</th></tr></thead><tbody><tr><td><code>deepCopy</code> (小对象)</td><td>~5,516,000</td><td>⚡ 极快</td><td>小对象深拷贝性能最优</td></tr><tr><td><code>pick</code> (少量键)</td><td>~3,026,000</td><td>⚡ 极快</td><td>少量键选择性能优秀</td></tr><tr><td><code>deepCopy</code> (嵌套对象)</td><td>~187,000</td><td>🚀 很快</td><td>嵌套对象深拷贝性能良好</td></tr><tr><td><code>pick</code> (大量键)</td><td>~75,000</td><td>🚀 很快</td><td>大量键选择性能良好</td></tr><tr><td><code>omit</code> (少量键)</td><td>~31,000</td><td>🚀 很快</td><td>少量键排除性能良好</td></tr><tr><td><code>omit</code> (大量键)</td><td>~30,000</td><td>🚀 很快</td><td>大量键排除性能良好</td></tr><tr><td><code>deepCopy</code> (大对象)</td><td>~4,000</td><td>⚠️ 较慢</td><td>大对象深拷贝较慢</td></tr></tbody></table><h3 id="字符串工具-string-utilities" tabindex="-1">字符串工具 (String Utilities) <a class="header-anchor" href="#字符串工具-string-utilities" aria-label="Permalink to &quot;字符串工具 (String Utilities)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>操作/秒</th><th>性能等级</th><th>说明</th></tr></thead><tbody><tr><td><code>capitalize</code> (短文本)</td><td>~6,951,000</td><td>⚡ 极快</td><td>短文本首字母大写性能最优</td></tr><tr><td><code>capitalize</code> (长文本)</td><td>~5,984,000</td><td>⚡ 极快</td><td>长文本首字母大写性能优秀</td></tr><tr><td><code>convert2pinyin</code> (中文)</td><td>~2,022,000</td><td>⚡ 极快</td><td>中文转拼音性能优秀</td></tr><tr><td><code>convert2pinyin</code> (短文本)</td><td>~1,528,000</td><td>⚡ 极快</td><td>短文本转拼音性能优秀</td></tr><tr><td><code>camelCase</code> (各种格式)</td><td>~1,050,000</td><td>⚡ 极快</td><td>驼峰转换性能优秀</td></tr><tr><td><code>convert2pinyin</code> (混合文本)</td><td>~1,054,000</td><td>⚡ 极快</td><td>混合文本转拼音性能优秀</td></tr><tr><td><code>camelCase</code> (长文本)</td><td>~3,000</td><td>⚠️ 较慢</td><td>长文本驼峰转换较慢</td></tr><tr><td><code>convert2pinyin</code> (长文本)</td><td>~1,800</td><td>⚠️ 较慢</td><td>长文本转拼音较慢</td></tr></tbody></table><h3 id="验证工具-validation-utilities" tabindex="-1">验证工具 (Validation Utilities) <a class="header-anchor" href="#验证工具-validation-utilities" aria-label="Permalink to &quot;验证工具 (Validation Utilities)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>操作/秒</th><th>性能等级</th><th>说明</th></tr></thead><tbody><tr><td><code>isEmail</code> (无效邮箱)</td><td>~3,757,000</td><td>⚡ 极快</td><td>无效邮箱验证性能最优</td></tr><tr><td><code>isPhone</code> (有效手机)</td><td>~3,507,000</td><td>⚡ 极快</td><td>有效手机验证性能优秀</td></tr><tr><td><code>isPhone</code> (无效手机)</td><td>~3,245,000</td><td>⚡ 极快</td><td>无效手机验证性能优秀</td></tr><tr><td><code>isEmail</code> (有效邮箱)</td><td>~3,150,000</td><td>⚡ 极快</td><td>有效邮箱验证性能优秀</td></tr><tr><td><code>checkIdNumber</code> (无效ID)</td><td>~1,852,000</td><td>⚡ 极快</td><td>无效身份证验证性能优秀</td></tr><tr><td><code>checkIdNumber</code> (有效ID)</td><td>~1,513,000</td><td>⚡ 极快</td><td>有效身份证验证性能优秀</td></tr></tbody></table><h2 id="性能等级说明" tabindex="-1">性能等级说明 <a class="header-anchor" href="#性能等级说明" aria-label="Permalink to &quot;性能等级说明&quot;">​</a></h2><ul><li>⚡ <strong>极快</strong> (&gt;1M ops/sec): 性能最优，适合高频调用</li><li>🚀 <strong>很快</strong> (100K-1M ops/sec): 性能优秀，适合常规使用</li><li>⚠️ <strong>较慢</strong> (&lt;100K ops/sec): 性能一般，适合低频使用</li></ul><h2 id="性能优化建议" tabindex="-1">性能优化建议 <a class="header-anchor" href="#性能优化建议" aria-label="Permalink to &quot;性能优化建议&quot;">​</a></h2><h3 id="_1-高频操作优化" tabindex="-1">1. 高频操作优化 <a class="header-anchor" href="#_1-高频操作优化" aria-label="Permalink to &quot;1. 高频操作优化&quot;">​</a></h3><ul><li>对于需要频繁调用的操作，优先使用性能等级为&quot;极快&quot;的函数</li><li><code>isArray</code>、<code>debounce</code>、<code>throttle</code>、<code>delay</code> 等函数创建性能最优</li></ul><h3 id="_2-大数据处理" tabindex="-1">2. 大数据处理 <a class="header-anchor" href="#_2-大数据处理" aria-label="Permalink to &quot;2. 大数据处理&quot;">​</a></h3><ul><li>对于大数组去重，考虑分批处理或使用其他优化策略</li><li>大对象深拷贝时，考虑是否真的需要深拷贝，或使用浅拷贝替代</li></ul><h3 id="_3-字符串处理" tabindex="-1">3. 字符串处理 <a class="header-anchor" href="#_3-字符串处理" aria-label="Permalink to &quot;3. 字符串处理&quot;">​</a></h3><ul><li>长文本处理时，考虑分块处理或使用流式处理</li><li>中文转拼音等复杂操作，对于长文本建议缓存结果</li></ul><h3 id="_4-验证函数" tabindex="-1">4. 验证函数 <a class="header-anchor" href="#_4-验证函数" aria-label="Permalink to &quot;4. 验证函数&quot;">​</a></h3><ul><li>所有验证函数性能都很好，可以放心使用</li><li>身份证验证相对较慢，但仍在可接受范围内</li></ul><h2 id="基准测试环境" tabindex="-1">基准测试环境 <a class="header-anchor" href="#基准测试环境" aria-label="Permalink to &quot;基准测试环境&quot;">​</a></h2><ul><li><strong>测试框架</strong>: Vitest v1.6.1</li><li><strong>Node.js</strong>: v22.x</li><li><strong>测试数据</strong>: 各种大小的测试数据集</li><li><strong>测试方法</strong>: 多次运行取平均值</li></ul><h2 id="持续性能监控" tabindex="-1">持续性能监控 <a class="header-anchor" href="#持续性能监控" aria-label="Permalink to &quot;持续性能监控&quot;">​</a></h2><p>我们会在每次发布前运行基准测试，确保性能不会退化。如果发现性能问题，会及时优化并更新此文档。</p><hr><p><em>最后更新: $(date)</em></p>',31)])])}const p=d(i,[["render",o]]);export{b as __pageData,p as default};
